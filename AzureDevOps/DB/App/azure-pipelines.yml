# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

name: $(TeamProject)_$(Build.DefinitionName)_$(Date:yyyyMMdd)$(Rev:.r)

variables:
  BuildConfiguration: "Release"
  ASPNETCORE_ENVIRONMENT: "Production"

pool:
  vmImage: windows-latest

stages:
  - stage: build

    variables:
    - group: azGroupVar


    jobs:
    - job: build
      continueOnError: false
      steps:


      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '2.1.x'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '**/*.csproj'
          arguments: '--configuration $(BuildConfiguration) -o $(Build.BinariesDirectory)'

      - task: DotNetCoreCLI@2
        displayName: 'publish Build application'
        inputs:
          command: 'publish'
          projects: '**/DotNetCoreSqlDb.csproj'
          publishWebProjects: false
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'API'
          publishLocation: 'Container'


      - task: AzureCLI@2
        inputs:
          azureSubscription: 'NewADOvsAzure'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
          
            dotnet ef migrations script -p DotNetCoreSqlDb.csproj -o migrate.sql -i
           # ls -l

      
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: 'migrate.sql'
          ArtifactName: 'migrateDB'
          publishLocation: 'Container'
      
  - stage: deploy
    dependsOn: 
      - build
    condition: succeeded ('build')
    variables:
    - group: variableGroupProdEnv

    jobs:
      - deployment: DeployCoreInfrastructure
        displayName: "deployApp"
        environment: App
        strategy:
          runOnce:
            deploy:
              steps:

              - task: DownloadPipelineArtifact@2
                inputs:
                  buildType: 'current'
                  artifactName: 'migrateDB'
                  targetPath: '$(System.DefaultWorkingDirectory)'
              
              - task: SqlAzureDacpacDeployment@1
                inputs:
                  azureSubscription: 'NewADOvsAzure'
                  AuthenticationType: 'server'
                  ServerName: 'sql-$(prefix)-$(location)-$(env).database.windows.net'
                  DatabaseName: 'sqldb-$(prefix)-$(location)-$(env)'
                  SqlUsername: '$(sqlServLogin)'
                  SqlPassword: '$(sqlServPass)'
                  deployType: 'SqlTask'
                  SqlFile: '$(System.DefaultWorkingDirectory)/migrate.sql'
                  IpDetectionMethod: 'AutoDetect'


              - task: DownloadPipelineArtifact@2
                inputs:
                  buildType: 'current'
                  artifactName: 'API'
                  targetPath: '$(System.DefaultWorkingDirectory)'

              - task: PowerShell@2
                inputs:
                  targetType: 'inline'
                  script: 'ls $(System.DefaultWorkingDirectory)'

              # - task: ExtractFiles@1
              #   inputs:
              #     archiveFilePatterns: '$(System.DefaultWorkingDirectory)\*.zip'
              #     destinationFolder: '$(System.DefaultWorkingDirectory)\unarchive'
              #     cleanDestinationFolder: false
              #     overwriteExistingFiles: false

              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'NewADOvsAzure'
                  appType: 'webApp'
                  WebAppName: 'app-aiakseikastsiuk-eastus-prodenv'
                  packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
              
            

  - stage: Swap

    variables:
    - group: variableGroupProdEnv

    jobs:
    - job: Swap
      steps:
      - task: AzureAppServiceManage@0
        inputs:
          azureSubscription: 'NewADOvsAzure'
          Action: 'Swap Slots'
          WebAppName: 'app-aiakseikastsiuk-eastus-prodenv'
          ResourceGroupName: 'rg-aiakseikastsiuk-eastus-prodenv'
          SourceSlot: 'app-aiakseikastsiuk-eastus-prodenv'